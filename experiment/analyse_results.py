import argparse
from pathlib import Path
import textwrap
from typing import Tuple, Dict

import pandas as pd
from scipy import stats


def _mean_ci(series: pd.Series) -> Tuple[float, float]:
    """Return mean and 95% CI for the given series (two-sided t)."""
    n = series.count()
    mean = series.mean()
    std = series.std(ddof=1)
    if n <= 1 or std == 0:
        return mean, 0.0
    ci = stats.t.ppf(0.975, df=n - 1) * std / (n ** 0.5)
    return mean, ci


def _paired_t(a: pd.Series, b: pd.Series) -> float:
    """Return p-value of paired t-test; series must be same length/order."""
    if len(a) != len(b) or len(a) < 2:
        return float("nan")
    stat, p = stats.ttest_rel(a, b)
    return p


def analyse(csv_path: Path, out_md: Path | None = None):
    df = pd.read_csv(csv_path)

    # Aggregate stats
    rows: list[dict[str, object]] = []
    for (phase, mode), grp in df.groupby(["phase", "mode"]):
        for metric in ("latency_s", "net_bytes", "avg_sm"):
            mean, ci = _mean_ci(grp[metric])
            rows.append({
                "phase": phase,
                "mode": mode,
                "metric": metric,
                "mean": mean,
                "ci": ci,
                "n": len(grp),
            })
    stats_df = pd.DataFrame(rows)

    # Paired t-test (sys vs remote_cache) per phase for latency
    pvals: Dict[str, float] = {}
    for phase in df["phase"].unique():
        a = df[(df["phase"] == phase) & (df["mode"] == "sys_simulated")]["latency_s"].reset_index(drop=True)
        b = df[(df["phase"] == phase) & (df["mode"] == "remote_cache")]["latency_s"].reset_index(drop=True)
        pvals[phase] = _paired_t(a, b)

    md_lines = ["# Experiment Summary", ""]
    md_lines.append("## Aggregate Statistics (mean ± 95% CI)")
    md_lines.append("")
    md_lines.append("| Phase | Mode | Metric | Mean | 95% CI | N |")
    md_lines.append("|-------|------|--------|------|-------|---|")
    for _, r in stats_df.iterrows():
        md_lines.append(
            f"| {r['phase']} | {r['mode']} | {r['metric']} | {r['mean']:.4f} | ±{r['ci']:.4f} | {r['n']} |"
        )
    md_lines.append("")
    md_lines.append("## Paired t-test (Latency: Sys vs Remote Cache)")
    md_lines.append("")
    md_lines.append("| Phase | p-value |")
    md_lines.append("|-------|---------|")
    for phase, p in pvals.items():
        md_lines.append(f"| {phase} | {p:.4e} |")

    report_md = "\n".join(md_lines)
    print(report_md)
    if out_md:
        out_md.write_text(report_md)
        print(f"Report written to {out_md}")


def main():
    p = argparse.ArgumentParser(description="Analyse experiment CSV and output stats")
    p.add_argument("csv", type=Path, help="Results CSV generated by experiment_driver.py")
    p.add_argument("--out_md", type=Path, help="Optional path to write Markdown report")
    args = p.parse_args()
    analyse(args.csv, args.out_md)


if __name__ == "__main__":
    main()