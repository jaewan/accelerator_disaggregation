!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
DisaggDevice	include/disagg_device.h	/^class DisaggDevice {$/;"	c
DisaggDevice	src/disagg_device.cc	/^DisaggDevice::DisaggDevice() {$/;"	f	class:DisaggDevice
REMOTE_GPU_EXTENSION_H	include/remote_gpu_extension.h	/^#define REMOTE_GPU_EXTENSION_H$/;"	d
RemoteGPUFunction	python/remote_gpu_extension.py	/^class RemoteGPUFunction(torch.autograd.Function):$/;"	c
RemoteGPUModule	example/basic_example.py	/^class RemoteGPUModule(torch.nn.Module):$/;"	c
RemoteGPUModule	python/remote_gpu_extension.py	/^class RemoteGPUModule(torch.nn.Module):$/;"	c
TORCH_LIBRARY_INIT	src/remote_gpu_extension.cc	/^TORCH_LIBRARY_INIT(remote_gpu_ops, m) {$/;"	f	namespace:remote_gpu
__init__	example/basic_example.py	/^    def __init__(self):$/;"	m	class:RemoteGPUModule
__init__	python/remote_gpu_extension.py	/^    def __init__(self):$/;"	m	class:RemoteGPUModule
a	python/remote_gpu_extension.py	/^    a = torch.randn(2, 2, requires_grad=True)$/;"	v
b	python/remote_gpu_extension.py	/^    b = torch.randn(2, 2, requires_grad=True)$/;"	v
backward	python/remote_gpu_extension.py	/^    def backward(ctx, grad_output):$/;"	m	class:RemoteGPUFunction
forward	example/basic_example.py	/^    def forward(self, a, b):$/;"	m	class:RemoteGPUModule
forward	python/remote_gpu_extension.py	/^    def forward(ctx, a, b):$/;"	m	class:RemoteGPUFunction
forward	python/remote_gpu_extension.py	/^    def forward(self, a, b):$/;"	m	class:RemoteGPUModule
forward_add	src/remote_gpu_extension.cc	/^at::Tensor forward_add(const at::Tensor& a, const at::Tensor& b) {$/;"	f	namespace:remote_gpu	typeref:typename:at::Tensor
kDisaggDeviceType	include/disagg_device.h	/^constexpr c10::DeviceType kDisaggDeviceType = static_cast<c10::DeviceType>(c10::DeviceType::COMP/;"	v	typeref:typename:c10::DeviceType
main	example/basic_example.py	/^def main():$/;"	f
main	src/main.cpp	/^int main() {$/;"	f	typeref:typename:int
model	python/remote_gpu_extension.py	/^    model = RemoteGPUModule()$/;"	v
offloadToRemote	src/disagg_device.cc	/^torch::Tensor DisaggDevice::offloadToRemote(const torch::Tensor& input) {$/;"	f	class:DisaggDevice	typeref:typename:torch::Tensor
receive_tensor_from_server	src/remote_gpu_extension.cc	/^at::Tensor receive_tensor_from_server() {$/;"	f	namespace:remote_gpu	typeref:typename:at::Tensor
register_remote_gpu_device	src/remote_gpu_extension.cc	/^void register_remote_gpu_device() {$/;"	f	namespace:remote_gpu	typeref:typename:void
remote_gpu	include/remote_gpu_extension.h	/^namespace remote_gpu {$/;"	n
remote_gpu	src/remote_gpu_extension.cc	/^namespace remote_gpu {$/;"	n	file:
remote_gpu_ops	python/remote_gpu_extension.py	/^remote_gpu_ops = load($/;"	v
result	python/remote_gpu_extension.py	/^    result = model(a, b)$/;"	v
run_server	python/remote_server.py	/^def run_server():$/;"	f
send_tensor_to_server	src/remote_gpu_extension.cc	/^void send_tensor_to_server(const at::Tensor& tensor) {$/;"	f	namespace:remote_gpu	typeref:typename:void
